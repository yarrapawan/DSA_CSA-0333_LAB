#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

int isOperator(char ch) {
    if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^') return 1;
    return 0;
}

int main() {
    char infix[100], postfix[100], stack[100];
    int top = -1, i = 0, j = 0;
    char ch;

    printf("Y.Pawan 192424294");

    printf("Enter infix expression: ");
    scanf("%s", infix);

    while (infix[i] != '\0') {
        ch = infix[i];
        if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9')) {
            postfix[j] = ch;
            j++;
        } else if (ch == '(') {
            top++;
            stack[top] = ch;
        } else if (ch == ')') {
            while (top != -1 && stack[top] != '(') {
                postfix[j] = stack[top];
                j++;
                top--;
            }
            if (top != -1 && stack[top] == '(') {
                top--;
            }
        } else if (isOperator(ch)) {
            while (top != -1 && precedence(stack[top]) >= precedence(ch)) {
                postfix[j] = stack[top];
                j++;
                top--;
            }
            top++;
            stack[top] = ch;
        }
        i++;
    }

    while (top != -1) {
        postfix[j] = stack[top];
        j++;
        top--;
    }

    postfix[j] = '\0';
    printf("Postfix expression: %s\n", postfix);

    return 0;
}
